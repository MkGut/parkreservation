<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Alpharetta Parks Court Reservations</title>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background-color: #ffffff;
      background-image: url('https://www.spadecor.nl/wp-content/uploads/2022/03/2000800-Natural-Marble-Fine-scaled-2.jpg');
      background-size: cover;
      background-attachment: fixed;
      background-repeat: no-repeat;
      background-position: center;
      color: #003057;
      margin: 0;
    }
    header {
      background-color: #003057;
      color: white;
      text-align: center;
      padding: 1rem;
    }
    header img {
      height: 70px;
      vertical-align: middle;
      margin-right: 1rem;
      filter: invert(100%);
    }
    header h1 {
      display: inline-block;
      font-size: 1.8rem;
      vertical-align: middle;
      margin: 0;
    }
    .nav-buttons {
      margin-top: 1rem;
      text-align: center;
    }
    .nav-buttons button {
      margin: 0.5rem;
      padding: 0.75rem 1.5rem;
      background-color: #a5c7e4;
      color: #003057;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-weight: bold;
    }
    .nav-buttons button:hover {
      background-color: #C1E1C1;
      color: #003057;
    }
    .container {
      padding: 2rem 1rem;
      max-width: 600px;
      margin: auto;
    }
    form label {
      font-weight: bold;
      display: block;
      margin-top: 1rem;
    }
    input, select {
      width: 100%;
      padding: 1rem;
      margin-top: 0.25rem;
      font-size: 1.1rem;
      border: 1px solid #ccc;
      border-radius: 6px;
      box-sizing: border-box;
    }
    button[type="submit"] {
      margin-top: 2rem;
      background-color: #003057;
      color: #fff;
      font-size: 1.4rem;
      font-weight: 600;
      padding: 1rem 2rem;
      border-radius: 12px;
      font-family: 'Segoe UI Semibold', 'Segoe UI', sans-serif;
      transition: background-color 0.3s ease, transform 0.2s ease;
    }
    button[type="submit"]:hover {
      background-color: #C1E1C1;
      color: #003057;
      transform: scale(1.05);
    }
    .hidden { display: none; }
    .message { margin-top: 1.5rem; text-align: center; font-weight: bold; }
    .success { color: green; }
    .error { color: red; }
    .court-list li {
      margin: 0.5rem 0;
      padding: 1rem;
      background: #f3f9ff;
      border-left: 5px solid #003057;
    }
    .free { background: #C1E1C1; border-left: 5px solid #C1E1C1; }
    .countdown { color: #c62828; font-weight: bold; }
  </style>
</head>
<body>
  <header style="display: flex; align-items: center; justify-content: space-between; padding: 1rem 2rem;">
    <img src="https://images.squarespace-cdn.com/content/533eff5be4b02cbd82d0c006/1579635075492-CFATK891VGFIULD732UJ/logo.png" alt="Alpharetta Logo" style="height: 70px; filter: invert(100%); cursor: pointer;" onclick="toggleAdminField()">
    <h1 style="flex: 1; text-align: center; margin: 0; font-size: 1.8rem;">Alpharetta Parks Court Reservations</h1>
    <div class="nav-buttons">
      <button id="nav-book" onclick="showSection('booking')">Make a Reservation</button>
      <button id="nav-view" onclick="showSection('viewing'); loadReservations()">View Courts</button>
    </div>
  </header>

  <div id="booking" class="container">
    <form id="reservationForm">
      <label for="name">Your Name</label>
      <input type="text" id="name" required />

      <label for="phone">Phone Number (optional)</label>
      <input type="text" id="phone" placeholder="+1XXXXXXXXXX" />

      <label for="court">Court Number (e.g., WL3, WB8)</label>
      <input type="text" id="court" list="courtSuggestions" required />
      <datalist id="courtSuggestions"></datalist>

      <label for="startTime">Start Time</label>
      <input type="time" id="startTime" required />

      <label for="duration">Session Length</label>
      <select id="duration" required>
        <option value="30">30 minutes</option>
        <option value="45">45 minutes</option>
        <option value="60">60 minutes</option>
        <option value="75">75 minutes</option>
        <option value="90">90 minutes</option>
      </select>

      <div id="adminWrapper" style="margin-top: 1rem; font-size: 0.9rem; opacity: 0.6; display: none;">
        <label for="adminCode">Admin Override (optional)</label>
        <input type="text" id="adminCode" style="font-size: 0.9rem; padding: 0.75rem;" />
      </div>

      <button type="submit">Submit Reservation</button>
      <div id="formMessage" class="message"></div>
    </form>
  </div>

  <div id="viewing" class="container hidden">
    <label for="filterPark">Filter by Park:</label>
    <select id="filterPark" onchange="loadReservations()" style="padding-right: 2rem; border-radius: 6px;">
      <option value="">All</option>
      <option value="WL">Wills</option>
      <option value="WB">Webb Bridge</option>
    </select>
    <h3>Booked Courts</h3>
    <ul id="bookedList" class="court-list" style="list-style: none; padding: 0; border-radius: 6px;"></ul>
    <h3>Free Courts</h3>
    <ul id="freeList" class="court-list" style="list-style: none; padding: 0; border-radius: 6px;"></ul>
  </div>

  <script>
    function showSection(id) {
      const navBook = document.getElementById('nav-book');
      const navView = document.getElementById('nav-view');
      if (id === 'booking') {
        navBook.style.display = 'none';
        navView.style.display = 'inline-block';
      } else {
        navBook.style.display = 'inline-block';
        navView.style.display = 'none';
      }
      document.getElementById('booking').classList.add('hidden');
      document.getElementById('viewing').classList.add('hidden');
      document.getElementById(id).classList.remove('hidden');
    }

    document.addEventListener('DOMContentLoaded', () => {
      showSection('booking');
      const now = new Date();
      now.setMinutes(Math.ceil(now.getMinutes() / 5) * 5);
      document.getElementById('startTime').value = now.toTimeString().slice(0,5);

      const suggestions = document.getElementById('courtSuggestions');
      ["WL", "WB"].forEach(prefix => {
        for (let i = 1; i <= 10; i++) {
          const option = document.createElement('option');
          option.value = `${prefix}${i}`;
          suggestions.appendChild(option);
        }
      });

      let hasCheckedLocation = false;
      document.getElementById('reservationForm').addEventListener('submit', async (e) => {
        e.preventDefault();

        const name = document.getElementById('name').value.trim();
        const phone = document.getElementById('phone').value.trim();
        const court = document.getElementById('court').value.trim().toUpperCase();
        const startTime = document.getElementById('startTime').value;
        const duration = parseInt(document.getElementById('duration').value);
        const adminCode = document.getElementById('adminCode').value.trim();
        const messageEl = document.getElementById('formMessage');

        if (!/^WL\\d+$|^WB\\d+$/i.test(court)) {
          messageEl.textContent = 'Invalid court code. Use format WL1, WB5, etc.';
          messageEl.className = 'message error';
          return;
        }

        try {
          const res = await fetch('https://us-central1-willspark-2ec4d.cloudfunctions.net/getReservations');
          const reservations = await res.json();
          const [hh, mm] = startTime.split(':').map(Number);
          const now = new Date();
          const start = new Date(now.getFullYear(), now.getMonth(), now.getDate(), hh, mm);
          const end = new Date(start.getTime() + duration * 60000);
          const midnight = new Date(start);
          midnight.setHours(23, 59, 59, 999);
          if (end > midnight && !adminCode) {
            messageEl.textContent = 'Reservation cannot extend past today without admin override.';
            messageEl.className = 'message error';
            return;
          }

          const overlap = reservations.some(r => {
            if (r.court.toUpperCase() !== court) return false;
            const existingStart = new Date(r.startTimeET || r.startTimestamp);
            const existingEnd = new Date(r.endTimeET || r.endTimestamp);
            return start < existingEnd && end > existingStart;
          });

          if (overlap) {
            messageEl.textContent = 'Court is already booked for this time.';
            messageEl.className = 'message error';
            return;
          }

          let lat = null, lng = null;
          if (!adminCode && !hasCheckedLocation) {
            const position = await new Promise((resolve, reject) =>
              navigator.geolocation.getCurrentPosition(resolve, reject, { timeout: 5000 })
            );
            ({ latitude: lat, longitude: lng } = position.coords);
            hasCheckedLocation = true;
          }

          const submitRes = await fetch('https://us-central1-willspark-2ec4d.cloudfunctions.net/reserveCourtV1', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name, phone, court, startTime, duration, adminCode, lat, lng })
          });

          const text = await submitRes.text();
          if (submitRes.ok) {
            messageEl.textContent = 'Reservation successful!';
            messageEl.className = 'message success';
          } else {
            messageEl.textContent = 'Error: ' + text;
            messageEl.className = 'message error';
          }
        } catch (err) {
          messageEl.textContent = 'Location error or request failed.';
          messageEl.className = 'message error';
        }
      });
    });

    async function loadReservations() {
      const bookedList = document.getElementById('bookedList');
      const freeList = document.getElementById('freeList');
      const filter = document.getElementById('filterPark').value;

      bookedList.innerHTML = '';
      freeList.innerHTML = '';

      const courts = [];
      ["WL", "WB"].forEach(p => { for (let i = 1; i <= 10; i++) courts.push(`${p}${i}`); });
      const active = new Set();

      try {
        const res = await fetch('https://us-central1-willspark-2ec4d.cloudfunctions.net/getReservations');
        const data = await res.json();
        const now = new Date();

        data.forEach(r => {
          if (!r.startTimeET || !r.endTimeET || !r.court) return;
          const start = new Date(r.startTimeET);
          const end = new Date(r.endTimeET);

          if (end > now && (!filter || r.court.toUpperCase().startsWith(filter))) {
            active.add(r.court.toUpperCase());
            const li = document.createElement('li');
            const minutesLeft = Math.max(0, Math.round((end - now) / 60000));
            li.innerHTML = `Court ${r.court.toUpperCase()} booked from ` +
              `${start.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', timeZoneName: 'short' })} to ` +
              `${end.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', timeZoneName: 'short' })} ` +
              `<span class="countdown">(free in ${minutesLeft} min)</span>`;
            bookedList.appendChild(li);
          }
        });

        courts.filter(code => !active.has(code.toUpperCase()) && (!filter || code.startsWith(filter)))
        .forEach(code => {
          const upcoming = data.find(r => r.court.toUpperCase() === code.toUpperCase());
          const li = document.createElement('li');
          if (upcoming) {
            const start = new Date(upcoming.startTimeET);
            li.textContent = `Court ${code} is free now, but booked at ${start.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', timeZoneName: 'short' })}.`;
          } else {
            li.textContent = `Court ${code} is free.`;
          }
          li.classList.add('free');
          freeList.appendChild(li);
        });

      } catch (err) {
        bookedList.innerHTML = '<li>Error loading reservations.</li>';
      }
    }

    function toggleAdminField() {
      const adminDiv = document.getElementById('adminWrapper');
      if (adminDiv) {
        adminDiv.style.display = adminDiv.style.display === 'none' ? 'block' : 'none';
      }
    }
  </script>
</body>
</html>
